<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Basket;
use Doctrine\ORM\EntityRepository;
use AppBundle\Service\BasketRepositoryInterface;

/**
 * BasketRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class BasketRepository extends EntityRepository implements BasketRepositoryInterface
{

    /**
     * Get user basket object
     *
     * @param $userid string user id
     *
     * @return object
     */
    public function getBasket($userid)
    {
        $query = $this->getEntityManager()->createQueryBuilder();

        $query->select('b, bu, p, pk, pr, d')
            ->from('AppBundle\Entity\Basket', 'b')
            ->join('b.bunch', 'bu')
            ->join('bu.product', 'p')
            ->join('bu.package', 'pk')
            ->join('bu.price', 'pr')
            ->leftJoin('bu.discount', 'd')
            ->where('b.uid = :uid')
            ->setParameter('uid', $userid);

        return $query->getQuery()->getResult();

//        return $this->findByUid($userid);
    }

    /**
     * Put product to basket
     *
     * @param $userId string   User id
     * @param $bunchId integer ProductRelationPackage Id
     * @param $count integer   Count of products
     *
     * @return bool true if no Exception thrown
     */
    public function putToBasket($userId, $bunchId, $count)
    {

        $entityManager = $this->getEntityManager();
        $basketEntity = $this->findOneBy(['uid' => $userId, 'bunch' => $bunchId]);

        // If the same product is in basket already
        // Set new amount
        if ($basketEntity) {
            $currentCount = $basketEntity->getCount();
            $newCount = $currentCount + $count;
            $basketEntity->setCount($newCount);
        } else {

            $bunchEntity = $entityManager->getRepository('AppBundle:ProductRelationPackage')->find($bunchId);
            $basketEntity = new Basket();
            $basketEntity->setCount($count);
            $basketEntity->setProductRelationPackage($bunchEntity);
            $basketEntity->setUid($userId);

        }
        $entityManager->persist($basketEntity);
        $entityManager->flush();

        return true;
    }

    /**
     * Remove product from basket
     *
     * @param $userId string User id
     * @param $id integer ProductRelationPackage id
     *
     * @return bool true if ok
     */
    public function removeFromBasket($userId, $id)
    {
        // Check if product exists in basket

        $entity = $this->findOneBy(['id' => $id, 'uid' => $userId]);

        if ($entity) {
            $entityManager = $this->getEntityManager();
            $entityManager->remove($entity);
            $entityManager->flush();
        }

        return true;
    }

    /**
     * Clean basket for partikular user
     *
     * @param $userId string UserId
     *
     * @return bool
     */
    public function cleanBasket($userId)
    {
        $entityManager = $this->getEntityManager();
        $dql = $entityManager->createQueryBuilder();

        $query = $dql->delete('AppBundle:Basket', 'b')
            ->where('b.uid = :userid')
            ->setParameter('userid', $userId)
            ->getQuery();
        $query->execute();

        return true;
    }

    /**
     * Get count of goods in basket
     *
     * @param $userId string UserId
     *
     * @return integer count of goods
     */
    public function getBasketCount($userId)
    {
        $entityManager = $this->getEntityManager();
        $dql = $entityManager->createQueryBuilder();

        $dql->select('count(b.id)')
            ->from('AppBundle:Basket', 'b')
            ->where('b.uid = :userid')
            ->setParameter('userid', $userId);

        $count = $dql->getQuery()->getSingleScalarResult();

        return $count;
    }

}
